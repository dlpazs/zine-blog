{"version":3,"sources":["components/cnn/cnn.zine.js","components/home/Home.js","components/topics/Topics.js","components/limitations/Limitations.js","App.js","serviceWorker.js","index.js"],"names":["CNN","className","Component","Home","Topic","match","params","topicId","Topics","to","url","path","component","Limitations","styles","background","width","cursor","margin","height","App","split","minSize","defaultSize","resizerStyle","exact","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2SA8CeA,E,iLA1CP,OACI,yBAAKC,UAAU,aACX,gEACA,s4CAqBA,2yB,GA1BEC,a,QCOHC,EAPF,kBACX,6BACE,oCACA,kDCFEC,EAAQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACZ,6BACE,6CACA,uCAASA,EAAMC,OAAOC,YAyBXC,EArBA,SAAC,GAAD,IAAGH,EAAH,EAAGA,MAAH,OACb,6BACE,sCACA,6CACA,4BACE,4BACE,kBAAC,IAAD,CAAMI,GAAE,UAAKJ,EAAMK,IAAX,iBAAR,gBAIF,4BACE,kBAAC,IAAD,CAAMD,GAAE,UAAKJ,EAAMK,IAAX,gBAAR,gBAMJ,kBAAC,IAAD,CAAOC,KAAI,UAAKN,EAAMK,IAAX,aAA2BE,UAAWR,MClBtCS,EAPK,kBAClB,6BACE,2CACA,kDCKEC,EAAS,CACbC,WAAY,OACZC,MAAO,MACPC,OAAQ,aACRC,OAAQ,QACRC,OAAQ,QAgCKC,MA7Bf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKnB,UAAU,OACb,kBAAC,IAAD,CACEoB,MAAM,WACNC,QAAS,IACTC,YAAa,IACbC,aAAcV,GAEd,8BACE,6BAAK,kBAAC,IAAD,CAAML,GAAG,cAAT,SACL,6BAAK,kBAAC,IAAD,CAAMA,GAAG,WAAT,WACL,6BAAK,kBAAC,IAAD,CAAMA,GAAG,SAAT,SACL,6BAAK,kBAAC,IAAD,CAAMA,GAAG,gBAAT,YAEP,6BACE,kBAAC,IAAD,CAAOgB,OAAK,EAACd,KAAK,aAAaC,UAAWT,IAC1C,kBAAC,IAAD,CAAOQ,KAAK,UAAUC,UAAWJ,IACjC,kBAAC,IAAD,CAAOG,KAAK,QAAQC,UAAWZ,IAC/B,kBAAC,IAAD,CAAOW,KAAK,eAAeC,UAAWC,SC1B9Ba,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASxB,MACvB,2DCZNyB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e9e05662.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass CNN extends Component {\r\n    render(){\r\n        return (\r\n            <div className=\"container\">\r\n                <h1>Everybody loves ... convolutions</h1>\r\n                <blockquote>\r\n                In 3D, the following mental image may prove useful. Imagine two sheets of colored paper: \r\n                one red and one blue. Put one on top of the other. Now crumple them together into a small \r\n                ball. That crumpled paper ball is your input data, and each sheet of paper is a class of \r\n                data in a classification problem. What a neural network (or any other machine-learning model) \r\n                is meant to do is figure out a transformation of the paper ball that would uncrumple it, so \r\n                as to make the two classes cleanly separable again. With deep learning, this would be \r\n                implemented as a series of simple transformations of the 3D space, such as those you could \r\n                apply on the paper ball with your fingers, one movement at a time. \r\n\r\n                Uncrumpling paper balls is what machine learning is about: finding neat representations \r\n                for complex, highly folded data manifolds. At this point, you should have a pretty good \r\n                intuition as to why deep learning excels at this: it takes the approach of incrementally \r\n                decomposing a complicated geometric transformation into a long chain of elementary ones, \r\n                which is pretty much the strategy a human would follow to uncrumple a paper ball. \r\n                Each layer in a deep network applies a transformation that disentangles the data a \r\n                little - and a deep stack of layers makes tractable an extremely complicated \r\n                disentanglement process.\r\n\r\n                Deep Learning with Python page 44–5.\r\n                </blockquote>\r\n                <blockquote>\r\n                Conv layers look at spatially local patterns by applying the same geometric transformation to \r\n                different spatial locations (patches) in an input tensor. This results in a representation that \r\n                are translation invariant (does not matter where in the image the object occurs). Convnets consist \r\n                of stacks of convolution and max-pooling layers. The pooling layers let you spatially downsample the \r\n                data, which is required to keep feature maps to a reasonable size as the number of features grows, \r\n                and to allow subsequent convolution layers to see a greater spatial extent of the inputs. Convnets \r\n                are often ended with a `Flatten` operation or global pooling layer, turning spatial feature maps \r\n                into vectors, followed by `Dense` layers to achieve classification or regression.\r\n                </blockquote>\r\n\r\n\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CNN\r\n\r\n// <img src=\"https://i.stack.imgur.com/iY5n5.png\" style=\"width:100px;height:100px;\"/>\r\n\r\n// <h2>What is a convolution?</h2> \r\n// It is a sliding window applied to a matrix, whether that be an image or feature map. At each element we multiply the \r\n// filter/kernel with the corresponding input pixel and then add them up. The same filter/kernel is slide across the input \r\n// which is called weight tying. Filters of the convolutions are learned, so the model learns which filter is best to apply \r\n// in each layer. An early layer of a convolution is likely, at best, to only detect very low level features such as edges. \r\n// This is because the filters are limited at earlier layers, whereas as we go deeper, the amount of output channels (which we set) \r\n// increases and later layers have several channels with which to predict collections of edges and orientations that make up a face or eye ball. \r\n\r\n// <h2>Properties</h2> \r\n// Location Invariance and Compositionality. Say you want to spot a cat in an image. Because of this sliding window \r\n// approach you don't care where the cat occurs. The second aspect is (local) compositionality. Each filter composes \r\n// a local patch of lower-level features into higher-level representation. You build edges from pixels, shapes from edges, \r\n// eyes from circles and so on. You can derive more complex shapes and objects from lower level representations such as \r\n// edges, pixels, gradients etc and from several channels of these features.\r\n\r\n// Convolutions are translationally invariant because the filters slide over the image horizontally and vertically. \r\n// But they are not rotationally invariant because the filters don't rotate. Thus, the net seems to need several similar \r\n// filters in different orientations to detect objects and patterns that are differently oriented.\r\n\r\n// <img src=\"https://cdn-images-1.medium.com/max/1200/1*B41mvbzpZ7ythn5AlJWh-A.gif\" style=\"width:100px;height:100px;\"/>","import React from 'react';\r\n\r\nconst Home = () => (\r\n  <div>\r\n    <h1>Home</h1>\r\n    <p>With some content</p>\r\n  </div>\r\n);\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\n\r\nconst Topic = ({ match }) => (\r\n  <div>\r\n    <h2>Current Route</h2>\r\n    <div>{`${match.params.topicId}`}</div>\r\n  </div>\r\n);\r\n\r\nconst Topics = ({ match }) => (\r\n  <div>\r\n    <h1>Topics</h1>\r\n    <p>Choose a topic</p>\r\n    <ul>\r\n      <li>\r\n        <Link to={`${match.url}/limitations`}>\r\n          Limitations\r\n        </Link>\r\n      </li>\r\n      <li>\r\n        <Link to={`${match.url}/batch_norm`}>\r\n          Batch Norm\r\n        </Link>\r\n      </li>\r\n    </ul>\r\n\r\n    <Route path={`${match.url}/:topicId`} component={Topic} />\r\n  </div>\r\n);\r\n\r\nexport default Topics;","import React from 'react';\r\n\r\nconst Limitations = () => (\r\n  <div>\r\n    <h1>Limitations</h1>\r\n    <p>With some content</p>\r\n  </div>\r\n);\r\n\r\nexport default Limitations;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom'\nimport CNN from \"./components/cnn/cnn.zine\"\nimport SplitPane from 'react-split-pane'\nimport Home from \"./components/home/Home\"\nimport Topics from \"./components/topics/Topics\"\nimport Limitations from \"./components/limitations/Limitations\"\n\nconst styles = {\n  background: '#000',\n  width: '2px',\n  cursor: 'col-resize',\n  margin: '0 5px',\n  height: '100%',\n};\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <SplitPane\n          split=\"vertical\"\n          minSize={100}\n          defaultSize={100}\n          resizerStyle={styles}\n        >\n          <menu>\n            <div><Link to=\"/zine-blog\">Home</Link></div>\n            <div><Link to=\"/topics\">Topics</Link></div>\n            <div><Link to=\"/cnns\">CNNs</Link></div>\n            <div><Link to=\"/limitations\">Limits</Link></div>\n          </menu>\n          <div>\n            <Route exact path=\"/zine-blog\" component={Home} />\n            <Route path=\"/topics\" component={Topics} />\n            <Route path=\"/cnns\" component={CNN} />\n            <Route path=\"/limitations\" component={Limitations} />\n          </div>\n        </SplitPane>\n      </div>\n    </Router>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}