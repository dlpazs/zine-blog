{"version":3,"sources":["components/cnn/cnn.zine.js","components/limitations/Limitations.js","components/layout/NavBar.js","components/topics/Topics.js","components/home/Home.js","App.js","serviceWorker.js","index.js"],"names":["CNN","className","src","Limitations","href","NavBar","class","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","to","Topics","match","Home","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQA+DeA,EA7DH,kBACA,yBAAKC,UAAU,aACX,mFACA,s4CAqBA,syBAWA,yBAAKC,IAAI,wCAET,sDApCJ,gvBA4CI,0CA5CJ,m2BAuDI,yBAAKA,IAAI,4ECmEVC,EA3HK,kBAClB,6BACE,8DACA,2BACA,4BACA,uBAAGC,KAAK,mFAAR,4CAFA,krJAsEJ,yBAAKF,IAAI,wEAtEL,48GCmBWG,EArBA,kBACX,yBAAKC,MAAM,iDACP,uBAAGA,MAAM,eAAeF,KAAK,cAA7B,aACA,4BAAQE,MAAM,iBAAiBC,KAAK,SAASC,cAAY,WAAWC,cAAY,aAAaC,gBAAc,YAAYC,gBAAc,QAAQC,aAAW,qBACpJ,0BAAMN,MAAM,yBAGhB,yBAAKA,MAAM,2BAA2BO,GAAG,aACrC,wBAAIP,MAAM,cACV,wBAAIA,MAAM,mBACN,uBAAGA,MAAM,WAAWF,KAAK,cAAzB,QAA2C,0BAAME,MAAM,WAAZ,eAE/C,wBAAIA,MAAM,YACN,uBAAGA,MAAM,WAAWF,KAAK,WAAzB,UACA,kBAAC,IAAD,CAAMU,GAAG,iBCPVC,EAPA,SAAC,GAAD,EAAGC,MAAH,OACb,6BACE,wCCSWC,EAZF,kBACX,6BACA,oCACA,6UCkCaC,MAnBf,WACE,OACE,yBAAKjB,UAAU,aACb,kBAAC,IAAD,KACA,kBAAC,EAAD,MACA,yBAAKA,UAAU,OAEb,6BACE,kBAAC,IAAD,CAAOkB,OAAK,EAACC,KAAK,aAAaC,UAAWJ,IAC1C,kBAAC,IAAD,CAAOG,KAAK,UAAUC,UAAWN,IACjC,kBAAC,IAAD,CAAOK,KAAK,QAAQC,UAAWrB,IAC/B,kBAAC,IAAD,CAAOoB,KAAK,eAAeC,UAAWlB,SCnB5BmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAST,MACvB,2DCZNU,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4339516d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nconst CNN = () => (\r\n            <div className=\"container\">\r\n                <h1>Everybody loves ... convolutions (Work in progress)</h1>\r\n                <blockquote>\r\n                In 3D, the following mental image may prove useful. Imagine two sheets of colored paper: \r\n                one red and one blue. Put one on top of the other. Now crumple them together into a small \r\n                ball. That crumpled paper ball is your input data, and each sheet of paper is a class of \r\n                data in a classification problem. What a neural network (or any other machine-learning model) \r\n                is meant to do is figure out a transformation of the paper ball that would uncrumple it, so \r\n                as to make the two classes cleanly separable again. With deep learning, this would be \r\n                implemented as a series of simple transformations of the 3D space, such as those you could \r\n                apply on the paper ball with your fingers, one movement at a time. \r\n\r\n                Uncrumpling paper balls is what machine learning is about: finding neat representations \r\n                for complex, highly folded data manifolds. At this point, you should have a pretty good \r\n                intuition as to why deep learning excels at this: it takes the approach of incrementally \r\n                decomposing a complicated geometric transformation into a long chain of elementary ones, \r\n                which is pretty much the strategy a human would follow to uncrumple a paper ball. \r\n                Each layer in a deep network applies a transformation that disentangles the data a \r\n                little - and a deep stack of layers makes tractable an extremely complicated \r\n                disentanglement process.\r\n\r\n                Deep Learning with Python page 44–5.\r\n                </blockquote>\r\n                <blockquote>\r\n                Conv layers look at spatially local patterns by applying the same geometric transformation to \r\n                different spatial locations (patches) in an input tensor. This results in a representation that \r\n                are translation invariant (does not matter where in the image the object occurs). Convnets consist \r\n                of stacks of convolution and max-pooling layers. The pooling layers let you spatially downsample the \r\n                data, which is required to keep feature maps to a reasonable size as the number of features grows, \r\n                and to allow subsequent convolution layers to see a greater spatial extent of the inputs. Convnets \r\n                are often ended with a `Flatten` operation or global pooling layer, turning spatial feature maps \r\n                into vectors, followed by `Dense` layers to achieve classification or regression.\r\n                </blockquote>\r\n\r\n                <img src=\"https://i.stack.imgur.com/iY5n5.png\"/>\r\n\r\n                <h2>What is a convolution?</h2> \r\n                It is a sliding window applied to a matrix, whether that be an image or feature map. At each element we multiply the \r\n                filter/kernel with the corresponding input pixel and then add them up. The same filter/kernel is slide across the input \r\n                which is called weight tying. Filters of the convolutions are learned, so the model learns which filter is best to apply \r\n                in each layer. An early layer of a convolution is likely, at best, to only detect very low level features such as edges. \r\n                This is because the filters are limited at earlier layers, whereas as we go deeper, the amount of output channels (which we set) \r\n                increases and later layers have several channels with which to predict collections of edges and orientations that make up a face or eye ball. \r\n\r\n                <h2>Properties</h2> \r\n                Location Invariance and Compositionality. Say you want to spot a cat in an image. Because of this sliding window \r\n                approach you don't care where the cat occurs. The second aspect is (local) compositionality. Each filter composes \r\n                a local patch of lower-level features into higher-level representation. You build edges from pixels, shapes from edges, \r\n                eyes from circles and so on. You can derive more complex shapes and objects from lower level representations such as \r\n                edges, pixels, gradients etc and from several channels of these features.\r\n\r\n                Convolutions are translationally invariant because the filters slide over the image horizontally and vertically. \r\n                But they are not rotationally invariant because the filters don't rotate. Thus, the net seems to need several similar \r\n                filters in different orientations to detect objects and patterns that are differently oriented.\r\n\r\n                <img src=\"https://cdn-images-1.medium.com/max/1200/1*B41mvbzpZ7ythn5AlJWh-A.gif\" />\r\n                \r\n            </div>\r\n)\r\n\r\nexport default CNN\r\n\r\n","import React from 'react';\r\n\r\nconst Limitations = () => (\r\n  <div>\r\n    <h1>Limitations (Work in progress)</h1>\r\n    <p>\r\n    <h2>\r\n    <a href=\"http://faculty.neu.edu.cn/yury/AAI/Textbook/Deep%20Learning%20with%20Python.pdf\">\r\n        Heavily Inspired by this brilliant book</a>\r\n    </h2>\r\n\r\nDeep learning works by doing a series of geometric transformations on an input. And then, \r\ngiven some error signal, improves the geometric transformations iteratively to map some \r\ninput x to a correct output y. \r\n\r\n\"In deep learning, everything is a vector: everything is a point in a geometric space. \r\nModel inputs and targets are first vectorized: turned into an initial input vector space \r\nand target vector space. Each layer operates one simple geometric transformation on the \r\ndata that goes through it. The chain of layers forms one complex geometric trasnformation, \r\nbroken down into a series of simpler ones. This complex transformation attempts to map the \r\ninput space to the target space, one point at a time. This transformation is parameterized \r\nby weights of the layers, which are iteratively updated based on how well the model is \r\ncurrently performing. A key characteristic is that the geometric trasnformation must be \r\ndifferentiable, to be able to perform gradient descent. Thi means the geometric morphing \r\nfrom inputs to outputs must be smooth and continuous - a significant constraint.\"\r\n\r\n\"The entire process of applying this complex geometric transformation to the input data can be \r\nvisualized in 3D by imagining a person trying to uncrumple a paper ball: the crumpled paper ball \r\nis the manifold of the input data that the model starts with.\r\nEach movement operated by the person on the paper ball is similar to a simple geometric \r\ntransformation operated by one layer. The full uncrumpling gesture sequence is the complex \r\ntransformation of the entire model. Deep-learning models are mathematical machines for uncrumpling \r\ncomplicated manifolds of high-dimensional data.\r\n\r\nThat’s the magic of deep learning: turning meaning into vectors, into geometric spaces, and \r\nthen incrementally learning complex geometric transformations that map one space to another. \r\nAll you need are spaces of sufficiently high dimensionality in order to capture the full scope \r\nof the relationships found in the original data.\"\r\n\r\n\"The whole thing hinges on a single core idea: that meaning is derived from the pairwise \r\nrelationship between things (between words in a language, between pixels in an image) and \r\nthat these relationships can be captured by a distance function. If the brain works in \r\ngeometric spaces is a different question. Vector spaces are efficient to work with from a \r\ncomputational standpoint, but different data structures can be envisioned- like graphs. \r\nNeural networks initially emerged from using graphs (connectionism) but nowadays they have \r\nan incorrect meaning since they are neither neural nor networks. A more appropriate name is \r\nlayered representations learning or hierarchical representations learning, or deep differentiable \r\nmodels or chained geometric transforms.\"\r\n\r\n\"The space of applications is nearly infinite but many are completely out of reach for current \r\ndeep learning techniques. You cannot train a model to read a product description and generate \r\nthe appropriate codebase. Anything that requires reasoning, long-term planning, and algorithmic \r\ndata manipulation is out of reach for deep-learning models no matter how much data is given. \r\n\r\nThis is because a deep-learning model is just a chain of simple, continuous geometric \r\ntransformation mapping one vector space into another. All it can do is map one data manifold X \r\ninto another manifold Y, assuming the existence of a learnable continuous transform from X to Y.\"\r\n\r\n\"One real risk is overestimating/ anthropomorphizing deep-learning models and their abilities. \r\nA fundamental feature of humans is our theory of mind: our tendency to project intentions, beliefs, \r\nand knowledge on the things around us. Drawing a smiley face on a rock suddenly makes it happy-in \r\nour minds. Applied to deep learning, this means that, for instance, when we're able to train a \r\nmodel to generate captions to describe pictures and the captions it generates. Then we're \r\nsurprised when any slight departure from the sort of images present in the training data \r\ncauses the model to generate completely absurd captions. \r\n\r\nThis is highlighted by adversarial examples, which are samples ged to a deep-learning network \r\nthat are designed to trick the model into misclassifying them. It's possible to do gradient \r\nascent in input space to generate inputs that maximize the activation of some convnet filter-this \r\nis the basis of the filter-visualization technique. Similarly, through gradient ascent you can \r\nslightly modify an image to maximize the class prediction for a given class. By taking a \r\npicture of a panda and adding to it a gibbon gradient, we can get a neural network to classify \r\nthe panda as a gibbon. This evidences both the brittleness of these models and the deep \r\ndifference between their input-to-output mapping and our human perception.\"\r\n\r\n<img src=\"https://blog.keras.io/img/limitations-of-dl/adversarial_example.png\" />\r\n\"In short, deepl-learning models don't have any understanding of their input-not in the human \r\nsense. Our understanding of images, sounds etc is grounded in our sensimotor experience as humans. \r\nML models have no access to such experiences and thus can't understand their inputs in a human \r\nrelatable way. By annotating large numbers of training examples to feed to our models, we get \r\nthem to learn a geometric transform that maps data to human concepts on a specific set of examples, \r\nbut this mapping is a simplistic sketch of the original model in our minds-the one developed from \r\nour experience as embodied agents.\r\n\r\nNever fall into the trap of believing that neural networks understand the task they perform. \r\nThey were trained on a different, far narrower task than the one we wanted to teach them: that of \r\nmapping training inputs to training targets, point by point. Show them anything that deviates from \r\ntheir training data, and they will break.\"\r\n\r\n\"Humans are capable of far more than mapping immediate stimuli to immediate\r\nresponses, as a deep network, or maybe an insect, would. We maintain complex, abstract\r\nmodels of our current situation, of ourselves, and of other people, and can use these\r\nmodels to anticipate different possible futures and perform long-term planning. We\r\ncan merge together known concepts to represent something we’ve never experienced \r\nbefore-like picturing a horse wearing jeans, for instance. This ability to hypothecize, \r\nto expand our mental model beyond what we can experience directly-to perform abstraction \r\nand reasoning-is arguably the defining characterstic of human cognition. \r\nExtreme generalization: an ability to adapt to novel, never-before experienced \r\nsituations using little data or no new data. This stands in sharp contrast with deep nets, \r\nlocal generalization. The mapping from inputs to outputs performed by deep net quickly \r\nstops making sense if new inputs deviate from what was seen during training. Consider, \r\nfor instance, the problem of learning the appropriate launch parameters to get a rocket \r\nto land on the moon. If you used a deep net for this task and trained\r\nit using supervised learning or reinforcement learning, you’d have to feed it thousands\r\nor even millions of launch trials: you’d need to expose it to a dense sampling of the input\r\nspace, in order for it to learn a reliable mapping from input space to output space. In\r\ncontrast, as humans we can use our power of abstraction to come up with physical \r\nmodels—rocket science—and derive an exact solution that will land the rocket on the moon\r\nin one or a few trials. Similarly, if you developed a deep net controlling a human body,\r\nand you wanted it to learn to safely navigate a city without getting hit by cars, the net\r\nwould have to die many thousands of times in various situations until it could infer that\r\ncars are dangerous, and develop appropriate avoidance behaviors. Dropped into a new\r\ncity, the net would have to relearn most of what it knows. On the other hand, humans\r\nare able to learn safe behaviors without having to die even once—again, thanks to our\r\npower of abstract modeling of hypothetical situations.\"\r\n\r\n\"In short, despite our progress on machine perception, we’re still far from humanlevel AI. \r\nOur models can only perform local generalization, adapting to new situations that must be \r\nsimilar to past data, whereas human cognition is capable of extreme generalization, quickly \r\nadapting to radically novel situations and planning\r\nfor long-term future situations.\"\r\n</p>\r\n  </div>\r\n);\r\n\r\nexport default Limitations;","import React from 'react';\r\nimport {  Link } from 'react-router-dom'\r\n\r\nconst NavBar = () => (\r\n    <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        <a class=\"navbar-brand\" href=\"/zine-blog\">DL Zine's</a>\r\n        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span class=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n\r\n        <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n            <ul class=\"navbar-nav\">\r\n            <li class=\"nav-item active\">\r\n                <a class=\"nav-link\" href=\"/zine-blog\">Home <span class=\"sr-only\">(current)</span></a>\r\n            </li>\r\n            <li class=\"nav-item\">\r\n                <a class=\"nav-link\" href=\"/topics\">Topics</a>\r\n                <Link to=\"/topics\"></Link>\r\n            </li>\r\n            </ul>\r\n        </div>\r\n    </nav>\r\n);\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\n\r\nconst Topics = ({ match }) => (\r\n  <div>\r\n    <h1>Topics</h1>\r\n    \r\n  </div>\r\n);\r\n\r\nexport default Topics;","import React from 'react';\r\n\r\nconst Home = () => (\r\n  <div>\r\n  <h1>Home</h1>\r\n  <p>\r\n    This site is designed to produce helpful content for people trying to learn deep learning and\r\n    for me to formalize my understanding. I try and take work from brilliant educators and \r\n    practioners and condense and describe them in a simplistic way to enable new comers to learn\r\n    without being intimidated.\r\n  </p>\r\n</div>\r\n);\r\n\r\nexport default Home;\r\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom'\nimport CNN from \"./components/cnn/cnn.zine\"\nimport Limitations from \"./components/limitations/Limitations\"\nimport NavBar from \"./components/layout/NavBar\"\nimport Topics from \"./components/topics/Topics\"\nimport Home from \"./components/home/Home\"\n\nconst styles = {\n  background: '#000',\n  width: '2px',\n  cursor: 'col-resize',\n  margin: '0 5px',\n  height: '100%',\n  backgroundColor: \"#ccfff5\",\n  color: \"black\"\n};\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Router>\n      <NavBar/>\n      <div className=\"App\">\n          \n        <div>\n          <Route exact path=\"/zine-blog\" component={Home}/>\n          <Route path=\"/topics\" component={Topics}/>\n          <Route path=\"/cnns\" component={CNN} />\n          <Route path=\"/limitations\" component={Limitations} />\n        </div>\n      </div>\n    </Router>\n    </div>\n  );\n}\n\nexport default App;\n\n\n{/* <SplitPane\n          split=\"vertical\"\n          minSize={100}\n          defaultSize={100}\n          resizerStyle={styles}\n        >\n          <menu>\n            <div><Link to=\"/zine-blog\">Home</Link></div>\n            <div><Link to=\"/topics\">Topics</Link></div>\n            <div><Link to=\"/cnns\">CNNs</Link></div>\n            <div><Link to=\"/limitations\">Limits</Link></div>\n          </menu>\n          <div>\n            <Route exact path=\"/zine-blog\" component={Home} />\n            <Route path=\"/topics\" component={Topics} />\n            <Route path=\"/cnns\" component={CNN} />\n            <Route path=\"/limitations\" component={Limitations} />\n          </div>\n        </SplitPane> */}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}