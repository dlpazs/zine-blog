(this["webpackJsonpzine-blog"]=this["webpackJsonpzine-blog"]||[]).push([[0],{17:function(e,t,a){e.exports=a(29)},22:function(e,t,a){},23:function(e,t,a){},29:function(e,t,a){"use strict";a.r(t);var n=a(0),o=a.n(n),i=a(14),r=a.n(i),s=(a(22),a(23),a(8)),l=a(5),c=function(){return o.a.createElement("div",{className:"container"},o.a.createElement("h1",null,"Everybody loves ... convolutions (Work in progress)"),o.a.createElement("blockquote",null,"In 3D, the following mental image may prove useful. Imagine two sheets of colored paper: one red and one blue. Put one on top of the other. Now crumple them together into a small ball. That crumpled paper ball is your input data, and each sheet of paper is a class of data in a classification problem. What a neural network (or any other machine-learning model) is meant to do is figure out a transformation of the paper ball that would uncrumple it, so as to make the two classes cleanly separable again. With deep learning, this would be implemented as a series of simple transformations of the 3D space, such as those you could apply on the paper ball with your fingers, one movement at a time.\xa0 Uncrumpling paper balls is what machine learning is about: finding neat representations for complex, highly folded data manifolds. At this point, you should have a pretty good intuition as to why deep learning excels at this: it takes the approach of incrementally decomposing a complicated geometric transformation into a long chain of elementary ones, which is pretty much the strategy a human would follow to uncrumple a paper ball. Each layer in a deep network applies a transformation that disentangles the data a little\u200a-\u200aand a deep stack of layers makes tractable an extremely complicated disentanglement process. Deep Learning with Python page 44\u20135."),o.a.createElement("blockquote",null,"Conv layers look at spatially local patterns by applying the same geometric transformation to different spatial locations (patches) in an input tensor. This results in a representation that are translation invariant (does not matter where in the image the object occurs). Convnets consist of stacks of convolution and max-pooling layers. The pooling layers let you spatially downsample the data, which is required to keep feature maps to a reasonable size as the number of features grows, and to allow subsequent convolution layers to see a greater spatial extent of the inputs. Convnets are often ended with a `Flatten` operation or global pooling layer, turning spatial feature maps into vectors, followed by `Dense` layers to achieve classification or regression."),o.a.createElement("img",{src:"https://i.stack.imgur.com/iY5n5.png"}),o.a.createElement("h2",null,"What is a convolution?"),"It is a sliding window applied to a matrix, whether that be an image or feature map. At each element we multiply the filter/kernel with the corresponding input pixel and then add them up. The same filter/kernel is slide across the input which is called weight tying. Filters of the convolutions are learned, so the model learns which filter is best to apply in each layer. An early layer of a convolution is likely, at best, to only detect very low level features such as edges. This is because the filters are limited at earlier layers, whereas as we go deeper, the amount of output channels (which we set) increases and later layers have several channels with which to predict collections of edges and orientations that make up a face or eye ball.",o.a.createElement("h2",null,"Properties"),"Location Invariance and Compositionality. Say you want to spot a cat in an image. Because of this sliding window approach you don't care where the cat occurs. The second aspect is (local) compositionality. Each filter composes a local patch of lower-level features into higher-level representation. You build edges from pixels, shapes from edges, eyes from circles and so on. You can derive more complex shapes and objects from lower level representations such as edges, pixels, gradients etc and from several channels of these features. Convolutions are translationally invariant because the filters slide over the image horizontally and vertically. But they are not rotationally invariant because the filters don't rotate. Thus, the net seems to need several similar filters in different orientations to detect objects and patterns that are differently oriented.",o.a.createElement("img",{src:"https://cdn-images-1.medium.com/max/1200/1*B41mvbzpZ7ythn5AlJWh-A.gif"}))},h=function(){return o.a.createElement("div",null,o.a.createElement("h1",null,"Limitations (Work in progress)"),o.a.createElement("p",null,o.a.createElement("h2",null,o.a.createElement("a",{href:"http://faculty.neu.edu.cn/yury/AAI/Textbook/Deep%20Learning%20with%20Python.pdf"},"Heavily Inspired by this brilliant book")),'Deep learning works by doing a series of geometric transformations on an input. And then, given some error signal, improves the geometric transformations iteratively to map some input x to a correct output y. "In deep learning, everything is a vector: everything is a point in a geometric space. Model inputs and targets are first vectorized: turned into an initial input vector space and target vector space. Each layer operates one simple geometric transformation on the data that goes through it. The chain of layers forms one complex geometric trasnformation, broken down into a series of simpler ones. This complex transformation attempts to map the input space to the target space, one point at a time. This transformation is parameterized by weights of the layers, which are iteratively updated based on how well the model is currently performing. A key characteristic is that the geometric trasnformation must be differentiable, to be able to perform gradient descent. Thi means the geometric morphing from inputs to outputs must be smooth and continuous - a significant constraint." "The entire process of applying this complex geometric transformation to the input data can be visualized in 3D by imagining a person trying to uncrumple a paper ball: the crumpled paper ball is the manifold of the input data that the model starts with. Each movement operated by the person on the paper ball is similar to a simple geometric transformation operated by one layer. The full uncrumpling gesture sequence is the complex transformation of the entire model. Deep-learning models are mathematical machines for uncrumpling complicated manifolds of high-dimensional data. That\u2019s the magic of deep learning: turning meaning into vectors, into geometric spaces, and then incrementally learning complex geometric transformations that map one space to another. All you need are spaces of sufficiently high dimensionality in order to capture the full scope of the relationships found in the original data." "The whole thing hinges on a single core idea: that meaning is derived from the pairwise relationship between things (between words in a language, between pixels in an image) and that these relationships can be captured by a distance function. If the brain works in geometric spaces is a different question. Vector spaces are efficient to work with from a computational standpoint, but different data structures can be envisioned- like graphs. Neural networks initially emerged from using graphs (connectionism) but nowadays they have an incorrect meaning since they are neither neural nor networks. A more appropriate name is layered representations learning or hierarchical representations learning, or deep differentiable models or chained geometric transforms." "The space of applications is nearly infinite but many are completely out of reach for current deep learning techniques. You cannot train a model to read a product description and generate the appropriate codebase. Anything that requires reasoning, long-term planning, and algorithmic data manipulation is out of reach for deep-learning models no matter how much data is given. This is because a deep-learning model is just a chain of simple, continuous geometric transformation mapping one vector space into another. All it can do is map one data manifold X into another manifold Y, assuming the existence of a learnable continuous transform from X to Y." "One real risk is overestimating/ anthropomorphizing deep-learning models and their abilities. A fundamental feature of humans is our theory of mind: our tendency to project intentions, beliefs, and knowledge on the things around us. Drawing a smiley face on a rock suddenly makes it happy-in our minds. Applied to deep learning, this means that, for instance, when we\'re able to train a model to generate captions to describe pictures and the captions it generates. Then we\'re surprised when any slight departure from the sort of images present in the training data causes the model to generate completely absurd captions. This is highlighted by adversarial examples, which are samples ged to a deep-learning network that are designed to trick the model into misclassifying them. It\'s possible to do gradient ascent in input space to generate inputs that maximize the activation of some convnet filter-this is the basis of the filter-visualization technique. Similarly, through gradient ascent you can slightly modify an image to maximize the class prediction for a given class. By taking a picture of a panda and adding to it a gibbon gradient, we can get a neural network to classify the panda as a gibbon. This evidences both the brittleness of these models and the deep difference between their input-to-output mapping and our human perception."',o.a.createElement("img",{src:"https://blog.keras.io/img/limitations-of-dl/adversarial_example.png"}),'"In short, deepl-learning models don\'t have any understanding of their input-not in the human sense. Our understanding of images, sounds etc is grounded in our sensimotor experience as humans. ML models have no access to such experiences and thus can\'t understand their inputs in a human relatable way. By annotating large numbers of training examples to feed to our models, we get them to learn a geometric transform that maps data to human concepts on a specific set of examples, but this mapping is a simplistic sketch of the original model in our minds-the one developed from our experience as embodied agents. Never fall into the trap of believing that neural networks understand the task they perform. They were trained on a different, far narrower task than the one we wanted to teach them: that of mapping training inputs to training targets, point by point. Show them anything that deviates from their training data, and they will break." "Humans are capable of far more than mapping immediate stimuli to immediate responses, as a deep network, or maybe an insect, would. We maintain complex, abstract models of our current situation, of ourselves, and of other people, and can use these models to anticipate different possible futures and perform long-term planning. We can merge together known concepts to represent something we\u2019ve never experienced before-like picturing a horse wearing jeans, for instance. This ability to hypothecize, to expand our mental model beyond what we can experience directly-to perform abstraction and reasoning-is arguably the defining characterstic of human cognition. Extreme generalization: an ability to adapt to novel, never-before experienced situations using little data or no new data. This stands in sharp contrast with deep nets, local generalization. The mapping from inputs to outputs performed by deep net quickly stops making sense if new inputs deviate from what was seen during training. Consider, for instance, the problem of learning the appropriate launch parameters to get a rocket to land on the moon. If you used a deep net for this task and trained it using supervised learning or reinforcement learning, you\u2019d have to feed it thousands or even millions of launch trials: you\u2019d need to expose it to a dense sampling of the input space, in order for it to learn a reliable mapping from input space to output space. In contrast, as humans we can use our power of abstraction to come up with physical models\u2014rocket science\u2014and derive an exact solution that will land the rocket on the moon in one or a few trials. Similarly, if you developed a deep net controlling a human body, and you wanted it to learn to safely navigate a city without getting hit by cars, the net would have to die many thousands of times in various situations until it could infer that cars are dangerous, and develop appropriate avoidance behaviors. Dropped into a new city, the net would have to relearn most of what it knows. On the other hand, humans are able to learn safe behaviors without having to die even once\u2014again, thanks to our power of abstract modeling of hypothetical situations." "In short, despite our progress on machine perception, we\u2019re still far from humanlevel AI. Our models can only perform local generalization, adapting to new situations that must be similar to past data, whereas human cognition is capable of extreme generalization, quickly adapting to radically novel situations and planning for long-term future situations."'))},p=function(){return o.a.createElement("nav",{class:"navbar navbar-expand-lg navbar-light bg-light"},o.a.createElement("a",{class:"navbar-brand",href:"/zine-blog"},"DL Zine's"),o.a.createElement("button",{class:"navbar-toggler",type:"button","data-toggle":"collapse","data-target":"#navbarNav","aria-controls":"navbarNav","aria-expanded":"false","aria-label":"Toggle navigation"},o.a.createElement("span",{class:"navbar-toggler-icon"})),o.a.createElement("div",{class:"collapse navbar-collapse",id:"navbarNav"},o.a.createElement("ul",{class:"navbar-nav"},o.a.createElement("li",{class:"nav-item active"},o.a.createElement("a",{class:"nav-link",href:"/zine-blog"},"Home ",o.a.createElement("span",{class:"sr-only"},"(current)"))),o.a.createElement("li",{class:"nav-item"},o.a.createElement("a",{class:"nav-link",href:"/zine-blog/topics"},"Topics")))))},m=function(e){e.match;return o.a.createElement("div",null,o.a.createElement("h1",null,"Topics"))},d=function(){return o.a.createElement("div",null,o.a.createElement("h1",null,"Home"),o.a.createElement("p",null,"This site is designed to produce helpful content for people trying to learn deep learning and for me to formalize my understanding. I try and take work from brilliant educators and practioners and condense and describe them in a simplistic way to enable new comers to learn without being intimidated."))};var u=function(){return o.a.createElement("div",{className:"container"},o.a.createElement(s.a,null,o.a.createElement(p,null),o.a.createElement("div",{className:"App"},o.a.createElement("div",null,o.a.createElement(l.a,{exact:!0,path:"/zine-blog",component:d}),o.a.createElement(l.a,{path:"/zine-blog/topics",component:m}),o.a.createElement(l.a,{path:"/cnns",component:c}),o.a.createElement(l.a,{path:"/limitations",component:h})))))};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));r.a.render(o.a.createElement(u,null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()}))}},[[17,1,2]]]);
//# sourceMappingURL=main.51226e7f.chunk.js.map